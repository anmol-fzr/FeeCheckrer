networks:
  feecheckr:
    driver: bridge

services:
  fee-giver:
    container_name: FeeGiver
    build: "./FeeGiver/"
    ports:
      - 5174:5174
    networks:
      - feecheckr
    env_file: "./.feegiver.env"
    volumes:
      - ./FeeGiver:/app
    depends_on:
      - fee-checkrer
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:5174/health.html"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  fee-checkr:
    container_name: FeeCheckr 
    build: "./FeeCheckr"
    ports:
      - 5173:5173
    networks:
      - feecheckr
    env_file: "./.feecheckr.env"
    volumes:
      - ./FeeCheckr:/app
    depends_on:
      - fee-checkrer
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:5173/health.html"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    env_file: ".mongo.env"
    networks:
      - feecheckr
    volumes:
      - mongo-data:/data/db
      - ./scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  fee-checkrer:
    build: "./FeeCheckrer"
    container_name: server
    ports:
      - "3000:3000"
    env_file: ".feecheckrer.env"
    networks:
      - feecheckr
    volumes:
      - ./FeeCheckrer:/app
    depends_on:
      - mongodb
      - rabbitmq
      - minio
      - redis
      - fee-mailer
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:3000/health"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  rabbitmq:
    image: rabbitmq:alpine
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file: ".rabbitmq.env"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - feecheckr
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  fee-mailer:
    build: "./FeeMailer"
    container_name: fee-mailer
    ports: 
      - "6546:6546"
    env_file: ".feemailer.env"
    volumes:
      - ./FeeMailer:/app
    depends_on:
      - rabbitmq
    networks:
      - feecheckr
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:6546"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - feecheckr
    env_file:
      - .minio.env
    volumes:
      - ./minio-data:/data
    restart: always
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-I", "http://minio:9000/minio/health/live"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

volumes:
  mongo-data:
    driver: local
  minio-data:
    driver: local
  rabbitmq-data: 
    driver: local
